# Importing Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
data=pd.read_csv("/home/unix/Downloads/Social_Network_Ads(1).csv")
data.head()

data.info()
data.isnull().sum()
data.describe()

# input
x = data.iloc[:, [2, 3]].values

# output
y = data.iloc[:, 4].values

x

from sklearn.model_selection import train_test_split
xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size = 0.25, random_state = 0)

print("xtrain shape : ", xtrain.shape)
print("xtest shape : ", xtest.shape)
print("ytrain shape : ", ytrain.shape)
print("ytest shape : ", ytest.shape)

from sklearn.preprocessing import StandardScaler
sc_x = StandardScaler()
xtrain = sc_x.fit_transform(xtrain)
xtest = sc_x.transform(xtest)

print (xtrain[0:10, :])

from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state = 0)
classifier.fit(xtrain, ytrain)

y_pred1 = classifier.predict(xtest)
y_pred2 = classifier.predict(xtrain)

y_pred1.shape

plt.scatter(ytest, y_pred1, c = 'cyan')
plt.scatter(ytrain, y_pred2, c = 'blue')
plt.title("True value vs predicted value : Logistic Regression")
plt.show()

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(ytest, y_pred1)

print ("Confusion Matrix : \n", cm)

import seaborn as sns
Color_Conf__Matrix = sns.heatmap(cm, cmap='coolwarm', annot=True, fmt='0.2f')

from sklearn.metrics import accuracy_score
print ("Accuracy : ", accuracy_score(ytest, y_pred1))

from sklearn.metrics import precision_score
print("Precision: ",precision_score(ytest, y_pred1, average=None))

from sklearn.metrics import recall_score
print("Recall: ",recall_score(ytest, y_pred1, average=None))


from matplotlib.colors import ListedColormap
X_set, y_set = xtest, ytest
X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1,stop = X_set[:, 0].max() + 1, step = 0.01),np.arange(start = X_set[:, 1].min() - 1,stop = X_set[:, 1].max() + 1, step = 0.01))

plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape), alpha = 0.75, cmap = ListedColormap(('red', 'green')))

plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())

for i, j in enumerate(np.unique(y_set)):
    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],c = ListedColormap(('red', 'green'))(i), label = j)
plt.title('Classifier (Test set)')
plt.xlabel('Age')
plt.ylabel('Estimated Salary')
plt.legend()
plt.show();